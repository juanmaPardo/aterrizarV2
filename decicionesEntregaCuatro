Las deciciones que tomamos en la entrega cuatro son las siguientes:

Decidimos crear las vistas para los diferentes apartados que se pedian en el enunciado de manera tal que no se repita codigo pero que a su vez no se pierda la expresividad de cada una de las vistas, es decir, notamos que ciertas vistas eran muy similares como por ejemplo la de reserva exitosa,compra exitosa, error reserva y error compra, que podrian haber sido unificadas de manera tal que de acuerdo a lo que se necesitara expresar se modifiquen los labels y el texto, pero el nombre de esa vista hubiese sido muy generico y como la generacion de la vista era muy sencilla y de haberlo unificado se hubiese perdido expresividad en el codigo decidimos crear una vista para cada una de ellas. 
  Este mismo problema surgio a la hora de generar las vistas para mostrar las compras de los asientos realizados por el usuario y la vista para mostrar las reservas realizadas, sin embargo en este caso, si decidimos unificar ambas vistas en una, ya que la generacion de las tablas generaba mucho codigo, el contenido era el mismo, y lo unico que cambiaba es que a la hora de rellenar la tabla en un caso se debia usar la lista de las reservas realizadas por el usuario y en el otro caso se debia utilizar la lista de compras realizadas por el usuario, por lo que en este caso valia la pena crear una sola vista y dejar que los controladores le pasen por parametro la lista a utilizar para rellenar la lista.
  Finalmente nos quedaron 8 vistas, una para la pantalla de bienvenida, otra vista para realizar la busqueda de los asientos, una vista para expresar que una compra fue exitosa, otra para expresar que hubo un error en la compra, una vista para expresar que se realizo una reserva exitosa, otra para expresar que hubo un error en la reserva, una vista ReservaCompras que es la tabla que muestra los asientos reservados o comprados por los usuarios depende el caso, y por ultimo una vista para dar la posibilidad de una Sobrereserva. A su vez, tenemos controladores que tienen instancias de esas vistas junto con instancias del modelo al que hacen referencia. Decidimos crear un control de Bienvenida que basicamente lo que se encarga es de tener una instancia de la vista de bienvenida junto con instancias al controlador de busquedas,compras y reservas, junto a un actualizar de vistas, con el objetivo de que al momento en el que se desee abrir las otras vistas, el controlador de bienvenida se comunique con el controlador de la vista que se desee abrir y le ordene que realize las acciones pertinentes para mostrar la vista. El actualizador de vistas esta con el objetivo de actualizar tanto la vista de compras como la vista de reservas, sabemos que a traves de la vista de busqueda de asientos se puede tanto comprar como reservar asientos, la idea es entonces, que una vez que se compra un asiento desde la vista de busqueda se actualize la vista de asientos comprados por el usuario para que refleje la compra realizada, lo mismo sucede con las reservas. Tanto el controlador de compras como el de reservas se encargan de rellenar la tabla a la que hacen referencia con la informacion que es debida, ambos controladores extienden de ControladorTablaCompraReservas, el mismo fue creado ya que como mencionamos con anterioridad, su objetivo es el mismo, lo unico que cambia es la lista que usan para rellenar la tabla, por lo que con el objetivo de no repetir codigo, unificamos la funcionalidad compartida en ese controlador padre. Por ultimo el controlador de Busquedas tiene una instancia de la vista a la que hace referencia, junto con una instancia de la pagina aterrizar y un actualizador de las vistas. Basicamente el controlador de busquedas se encarga de agregar funcionalidad al boton de buscar para que cuando el mismo sea presionado se haga un fetch de la informacion que se encuentra en el textField relacionado a Orgien,Destino y Fecha, se cree un filtro de busqueda debido para cada uno de ellos, y se realize una busqueda de todos los asientos disponibles en la pagina aterrizar, en caso de no encontrar ningun asiento, o en caso que haya surgido un error, sease un formato de fecha incorrecto, entre otros factores, se haga un display del error que surgio, y en caso que se encuentren asientos que los mismos se vean reflejados en la tabla que posee la vista. A su vez el controlador define dos clases internas que implementan ActionListener con el objetivo que las mismas se encargen de handlear los eventos de Compra y reserva de los asientos que son seleccionados en la tabla. Esas clases internas son CompraAsiento y ReservaAsiento, basicamente lo que se encargan es de que una vez que son presionados los botones a los que hacen referencia, obtengan el campo que fue seleccionado en la tabla, obtengan el codigo de asiento, y se comuniquen con la pagina solicitando la compra o reserva del asiento seleccionado, en caso de exito el asiento es comprado/reservado y se hace un display de la ventana ExitoCompra/ExitoReserva segun sea debido mostrando que la compra/reserva se realizo con exito, la vista de compras y reservas es actualizada y en caso de la compra, el asiento es eliminado de la tabla de busquedas, ya que una vez que el asiento es comprado no debe encontrarse mas en la lista de busquedas para interactuar con el. En caso que el asiento no pueda ser comprado debido a algun error, o la reserva no pueda se mostrara el error debido a travez de un display de la vista ErrorCompra/ErrorReserva en donde se mostrara que el asiento no pudo ser comprado/reservado junto con la causa por la cual se dio esta anomalia. Finalmente si un usuario le da reservar a un asiento que se encuentra reservado se hace un display de la vista Sobrereservado en donde se da la opcion de sobrereservar el asiento o de seguir buscando.

Las deciciones las tomamos de esta manera ya que creiamos que era la mejor manera de que cada vista tenga su propio controlador, se dividan bien las responsabilidades ya que no hay una especie de controlador que controla todo, sino que cada uno tiene su propia interfaz y la vista/modelo al que hacen referencia para poder interactuar con los mismos. 
